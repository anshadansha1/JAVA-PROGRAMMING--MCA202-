import javax.swing.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.Map;
import java.sql.*;

public class Project_Hotel_anshad {
    private HotelManagementService hotelService = new HotelManagementService();
    private JTextField guestNameField, numOfGuestsField, reservationIdField, guestNameSearchField;

    public Project_Hotel_anshad() {
        // GUI initialization code
        JFrame frame = new JFrame("Hotel Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 400);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        JComboBox<String> mainMenu = new JComboBox<>(new String[]{"Make Reservation", "Cancel Reservation", "Find Room"});
        mainMenu.setBounds(20, 20, 200, 25);
        mainMenu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedOption = (String) mainMenu.getSelectedItem();
                switch (selectedOption) {
                    case "Make Reservation":
                        createMakeReservationPanel();
                        break;
                    case "Cancel Reservation":
                        createCancelReservationPanel();
                        break;
                    case "Find Room":
                        createFindRoomPanel();
                        break;
                }
            }
        });
        panel.add(mainMenu);

        frame.add(panel);
        frame.setVisible(true);
    }

    private void createMakeReservationPanel() {
        JFrame makeReservationFrame = new JFrame("Make Reservation");
        makeReservationFrame.setSize(300, 200);
        makeReservationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        JLabel guestNameLabel = new JLabel("Guest Name:");
        guestNameLabel.setBounds(20, 20, 100, 25);
        panel.add(guestNameLabel);

        guestNameField = new JTextField();
        guestNameField.setBounds(120, 20, 150, 25);
        panel.add(guestNameField);

        JLabel numOfGuestsLabel = new JLabel("Number of Guests:");
        numOfGuestsLabel.setBounds(20, 50, 150, 25);
        panel.add(numOfGuestsLabel);

        numOfGuestsField = new JTextField();
        numOfGuestsField.setBounds(150, 50, 120, 25);
        panel.add(numOfGuestsField);

        JButton makeReservationButton = new JButton("Make Reservation");
        makeReservationButton.setBounds(80, 90, 150, 25);
        makeReservationButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String guestName = guestNameField.getText();
                int numOfGuests = Integer.parseInt(numOfGuestsField.getText());
                hotelService.addReservation(guestName, numOfGuests);
            }
        });
        panel.add(makeReservationButton);

        makeReservationFrame.add(panel);
        makeReservationFrame.setVisible(true);
    }

    private void createCancelReservationPanel() {
        JFrame cancelReservationFrame = new JFrame("Cancel Reservation");
        cancelReservationFrame.setSize(300, 150);
        cancelReservationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        JLabel reservationIdLabel = new JLabel("Reservation ID:");
        reservationIdLabel.setBounds(20, 20, 100, 25);
        panel.add(reservationIdLabel);

        reservationIdField = new JTextField();
        reservationIdField.setBounds(120, 20, 150, 25);
        panel.add(reservationIdField);

        JButton cancelReservationButton = new JButton("Cancel Reservation");
        cancelReservationButton.setBounds(80, 60, 150, 25);
        cancelReservationButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int reservationId = Integer.parseInt(reservationIdField.getText());
                hotelService.cancelReservation(reservationId);
            }
        });
        panel.add(cancelReservationButton);

        cancelReservationFrame.add(panel);
        cancelReservationFrame.setVisible(true);
    }

    private void createFindRoomPanel() {
        JFrame findRoomFrame = new JFrame("Find Room");
        findRoomFrame.setSize(300, 150);
        findRoomFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        JLabel guestNameSearchLabel = new JLabel("Guest Name:");
        guestNameSearchLabel.setBounds(20, 20, 100, 25);
        panel.add(guestNameSearchLabel);

        guestNameSearchField = new JTextField();
        guestNameSearchField.setBounds(120, 20, 150, 25);
        panel.add(guestNameSearchField);

        JButton findRoomButton = new JButton("Find Room");
        findRoomButton.setBounds(80, 60, 150, 25);
        findRoomButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String guestName = guestNameSearchField.getText();
                hotelService.findRoom(guestName);
            }
        });
        panel.add(findRoomButton);

        findRoomFrame.add(panel);
        findRoomFrame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new Project_Hotel_anshad();
        });
    }
}

class HotelManagementService {
    final String JDBC_URL = "jdbc:mysql://localhost:3306/db_hotel?characterEncoding=utf8";
    final String USERNAME = "root";
    final String PASSWORD = "";

    public void addReservation(String guestName, int numberOfGuests) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
            Statement st = con.createStatement();
            ResultSet rs;

            String avl_room = "SELECT * FROM `rooms` WHERE is_booked = 0 LIMIT 1;";
            rs = st.executeQuery(avl_room);
            rs.next();
            int rs_chk = 0;
            rs_chk = rs.getInt("room_number");

            if (rs_chk != 0) {
                String str = "insert into reservations(room_number,guest_name,number_of_guests) values (";
                str = str + rs_chk + ",'";
                str = str + guestName + "',";
                str = str + numberOfGuests + ")";
                st.executeUpdate(str);

                str = "SELECT * FROM reservations WHERE room_number = " + rs_chk;
                rs = st.executeQuery(str);
                rs.next();
                int res_id = rs.getInt("reservation_id");

                str = "update rooms set is_booked = 1 where room_number = " + rs_chk + ";";
                System.out.println("Reservation successful!\n Reservation ID is : " + res_id);
                st.executeUpdate(str);
            } else {
                System.out.println("Sorry, no available rooms for reservation.");
            }
        } catch (Exception e) {
            System.out.println("\nError : " + e);
        }
    }

    public void cancelReservation(int reservationId) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
            Statement st = con.createStatement();
            ResultSet rs;
            String str = "select * from reservations";
            rs = st.executeQuery(str);
            boolean found = false;
            while (rs.next()) {

                int rs_chk = rs.getInt("reservation_id");
                int rm_no = rs.getInt("room_number");
                if (rs_chk == reservationId) {
                    str = "DELETE FROM reservations WHERE reservation_id = " + rs_chk;
                    st.executeUpdate(str);

                    str = "update rooms set is_booked = 0 where room_number = " + rm_no + ";";
                    st.executeUpdate(str);
                    System.out.println("\nReservation with ID " + reservationId + " is Cancelled!");
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("\nReservation with ID " + reservationId + " not found.");
            }
        } catch (Exception e) {
            System.out.println("\nError : " + e);
        }

    }

    public void displayAvailableRooms() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);

            Statement st = con.createStatement();
            ResultSet rs;

            String str = "SELECT * FROM rooms WHERE is_booked = 0";
            rs = st.executeQuery(str);

            System.out.println("\nAvailable Rooms ---------->");
            while (rs.next()) {
                int roomNumber = rs.getInt("room_number");
                System.out.println("Room Number : " + roomNumber);
                System.out.println("\n--------------------------------");
            }
        } catch (Exception e) {
            System.out.println("\nError : " + e);
        }
    }

    public void displayAllReservations() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);

            Statement st = con.createStatement();
            String str = "SELECT * FROM reservations";
            ResultSet rs = st.executeQuery(str);

            System.out.println("\nDisplaying All Reservations --------->");
            while (rs.next()) {

                int reservationId = rs.getInt("reservation_id");
                int roomNumber = rs.getInt("room_number");
                String guestName = rs.getString("guest_name");
                int numberOfGuests = rs.getInt("number_of_guests");
                if (guestName != null) {
                    System.out.println("\nReservation ID: " + reservationId +
                            "\nGuest Name: " + guestName +
                            "\nRoom Number: " + roomNumber +
                            "\nNumber of Guests: " + numberOfGuests + "\n-----------------");
                } else {
                    System.out.println("Sorry,there are no reservations! ");
                }
            }
        } catch (Exception e) {
            System.out.println("\nError : " + e);
        }

    }

    public void findRoom(String gname) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
            Statement st = con.createStatement();
            String str = "SELECT * FROM reservations";
            ResultSet rs = st.executeQuery(str);

            boolean found = false;
            System.out.println("\nDisplaying All Reservations --------->");
            while (rs.next()) {
                int roomNumber = rs.getInt("room_number");
                String guestName = rs.getString("guest_name");
                if (guestName.equals(gname)) {
                    System.out.println("\nRoom Number of " + gname + " is : " + roomNumber);
                    found = true;
                    break;
                }
            }

            if (!found) {
                System.out.println("Sorry, there is no Room Reserved for the given Customer");
            }
        } catch (Exception e) {
            System.out.println("\nError : " + e);
        }
    }
}
